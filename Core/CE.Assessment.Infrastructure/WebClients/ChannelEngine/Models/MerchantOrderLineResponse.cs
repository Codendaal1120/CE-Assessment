/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

namespace CE.Assessment.Infrastructure.WebClients.ChannelEngine.Models;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class MerchantOrderLineResponse : __ICanIterate
{
    public MerchantOrderLineResponse() { }

    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers] [System.Text.Json.Serialization.JsonConstructor] public MerchantOrderLineResponse(int id, OrderStatusView status, bool isFulfillmentByMarketplace, MerchantStockLocationResponse stockLocation, double originalFeeFixed, double vatRate, string channelProductNo, int quantity, int cancellationRequestedQuantity, double unitPriceInclVat, double feeFixed, double feeRate, Condition condition)
    {
        Id = id;
        Status = status;
        IsFulfillmentByMarketplace = isFulfillmentByMarketplace;
        StockLocation = stockLocation;
        OriginalFeeFixed = originalFeeFixed;
        VatRate = vatRate;
        ChannelProductNo = channelProductNo;
        Quantity = quantity;
        CancellationRequestedQuantity = cancellationRequestedQuantity;
        UnitPriceInclVat = unitPriceInclVat;
        FeeFixed = feeFixed;
        FeeRate = feeRate;
        Condition = condition;
    }

	public required int Id { get; set; }
	public string? ChannelOrderLineNo { get; set; }
	public required OrderStatusView Status { get; set; }
	public required bool IsFulfillmentByMarketplace { get; set; }
	public string? Gtin { get; set; }
	public string? Description { get; set; }
	public required MerchantStockLocationResponse StockLocation { get; set; }
	public double? UnitVat { get; set; }
	public double? LineTotalInclVat { get; set; }
	public double? LineVat { get; set; }
	public double? OriginalUnitPriceInclVat { get; set; }
	public double? OriginalUnitVat { get; set; }
	public double? OriginalLineTotalInclVat { get; set; }
	public double? OriginalLineVat { get; set; }
	public required double OriginalFeeFixed { get; set; }
	public string? BundleProductMerchantProductNo { get; set; }
	public string? JurisCode { get; set; }
	public string? JurisName { get; set; }
	public required double VatRate { get; set; }
	public double? UnitPriceExclVat { get; set; }
	public double? LineTotalExclVat { get; set; }
	public double? OriginalUnitPriceExclVat { get; set; }
	public double? OriginalLineTotalExclVat { get; set; }
	public System.Collections.Generic.List<MerchantOrderLineExtraDataResponse>? ExtraData { get; set; }
	public required string ChannelProductNo { get; set; }
	public string? MerchantProductNo { get; set; }
	public required int Quantity { get; set; }
	public required int CancellationRequestedQuantity { get; set; }
	public required double UnitPriceInclVat { get; set; }
	public required double FeeFixed { get; set; }
	public required double FeeRate { get; set; }
	public required Condition Condition { get; set; }
	public System.DateTime? ExactDeliveryDate { get; set; }
	public System.DateTime? ExpectedDeliveryDate { get; set; }
	public System.DateTime? LatestDeliveryDate { get; set; }
	public System.DateTime? ExpectedShipmentDate { get; set; }
	public System.DateTime? LatestShipmentDate { get; set; }

	System.Collections.Generic.IEnumerable<(string name, object? value)> __ICanIterate.IterateProperties()
	{
		yield return ("Id", Id);
		yield return ("ChannelOrderLineNo", ChannelOrderLineNo);
		yield return ("Status", Status switch
		{
			OrderStatusView.IN_PROGRESS => "IN_PROGRESS",
			OrderStatusView.SHIPPED => "SHIPPED",
			OrderStatusView.IN_BACKORDER => "IN_BACKORDER",
			OrderStatusView.MANCO => "MANCO",
			OrderStatusView.CANCELED => "CANCELED",
			OrderStatusView.IN_COMBI => "IN_COMBI",
			OrderStatusView.CLOSED => "CLOSED",
			OrderStatusView.@NEW => "NEW",
			OrderStatusView.RETURNED => "RETURNED",
			OrderStatusView.REQUIRES_CORRECTION => "REQUIRES_CORRECTION",
			OrderStatusView.AWAITING_PAYMENT => "AWAITING_PAYMENT",
			_ => null
		});
		yield return ("IsFulfillmentByMarketplace", IsFulfillmentByMarketplace);
		yield return ("Gtin", Gtin);
		yield return ("Description", Description);
		yield return ("StockLocation", StockLocation);
		yield return ("UnitVat", UnitVat);
		yield return ("LineTotalInclVat", LineTotalInclVat);
		yield return ("LineVat", LineVat);
		yield return ("OriginalUnitPriceInclVat", OriginalUnitPriceInclVat);
		yield return ("OriginalUnitVat", OriginalUnitVat);
		yield return ("OriginalLineTotalInclVat", OriginalLineTotalInclVat);
		yield return ("OriginalLineVat", OriginalLineVat);
		yield return ("OriginalFeeFixed", OriginalFeeFixed);
		yield return ("BundleProductMerchantProductNo", BundleProductMerchantProductNo);
		yield return ("JurisCode", JurisCode);
		yield return ("JurisName", JurisName);
		yield return ("VatRate", VatRate);
		yield return ("UnitPriceExclVat", UnitPriceExclVat);
		yield return ("LineTotalExclVat", LineTotalExclVat);
		yield return ("OriginalUnitPriceExclVat", OriginalUnitPriceExclVat);
		yield return ("OriginalLineTotalExclVat", OriginalLineTotalExclVat);
		yield return ("ExtraData", ExtraData);
		yield return ("ChannelProductNo", ChannelProductNo);
		yield return ("MerchantProductNo", MerchantProductNo);
		yield return ("Quantity", Quantity);
		yield return ("CancellationRequestedQuantity", CancellationRequestedQuantity);
		yield return ("UnitPriceInclVat", UnitPriceInclVat);
		yield return ("FeeFixed", FeeFixed);
		yield return ("FeeRate", FeeRate);
		yield return ("Condition", Condition switch
		{
			Condition.@NEW => "NEW",
			Condition.NEW_REFURBISHED => "NEW_REFURBISHED",
			Condition.USED_AS_NEW => "USED_AS_NEW",
			Condition.USED_GOOD => "USED_GOOD",
			Condition.USED_REASONABLE => "USED_REASONABLE",
			Condition.USED_MEDIOCRE => "USED_MEDIOCRE",
			Condition.UNKNOWN => "UNKNOWN",
			Condition.USED_VERY_GOOD => "USED_VERY_GOOD",
			_ => null
		});
		yield return ("ExactDeliveryDate", ExactDeliveryDate);
		yield return ("ExpectedDeliveryDate", ExpectedDeliveryDate);
		yield return ("LatestDeliveryDate", LatestDeliveryDate);
		yield return ("ExpectedShipmentDate", ExpectedShipmentDate);
		yield return ("LatestShipmentDate", LatestShipmentDate);
	}
}
