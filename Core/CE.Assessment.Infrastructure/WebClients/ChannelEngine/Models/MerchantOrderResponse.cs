/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

namespace CE.Assessment.Infrastructure.WebClients.ChannelEngine.Models;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class MerchantOrderResponse : __ICanIterate
{
    public MerchantOrderResponse() { }

    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers] [System.Text.Json.Serialization.JsonConstructor] public MerchantOrderResponse(int id, OrderSupport channelOrderSupport, OrderStatusView status, bool isBusinessOrder, MerchantAddressResponse billingAddress, MerchantAddressResponse shippingAddress, double shippingCostsInclVat, double totalInclVat, double originalSubTotalFee, double subTotalFee, double originalOrderFee, double orderFee, double originalTotalFee, double totalFee, string email, string currencyCode, System.DateTime orderDate)
    {
        Id = id;
        ChannelOrderSupport = channelOrderSupport;
        Status = status;
        IsBusinessOrder = isBusinessOrder;
        BillingAddress = billingAddress;
        ShippingAddress = shippingAddress;
        ShippingCostsInclVat = shippingCostsInclVat;
        TotalInclVat = totalInclVat;
        OriginalSubTotalFee = originalSubTotalFee;
        SubTotalFee = subTotalFee;
        OriginalOrderFee = originalOrderFee;
        OrderFee = orderFee;
        OriginalTotalFee = originalTotalFee;
        TotalFee = totalFee;
        Email = email;
        CurrencyCode = currencyCode;
        OrderDate = orderDate;
    }

	public required int Id { get; set; }
	public string? ChannelName { get; set; }
	public int? ChannelId { get; set; }
	public string? GlobalChannelName { get; set; }
	public int? GlobalChannelId { get; set; }
	public required OrderSupport ChannelOrderSupport { get; set; }
	public string? ChannelOrderNo { get; set; }
	public string? CommercialOrderNo { get; set; }
	public string? MerchantOrderNo { get; set; }
	public required OrderStatusView Status { get; set; }
	public required bool IsBusinessOrder { get; set; }
	public System.DateTime? AcknowledgedDate { get; set; }
	public System.DateTime? CreatedAt { get; set; }
	public System.DateTime? UpdatedAt { get; set; }
	public System.DateTime? ClosedAt { get; set; }
	public string? MerchantComment { get; set; }
	public required MerchantAddressResponse BillingAddress { get; set; }
	public required MerchantAddressResponse ShippingAddress { get; set; }
	public double? SubTotalInclVat { get; set; }
	public double? SubTotalVat { get; set; }
	public required double ShippingCostsInclVat { get; set; }
	public double? ShippingCostsVat { get; set; }
	public required double TotalInclVat { get; set; }
	public double? TotalVat { get; set; }
	public double? OriginalSubTotalInclVat { get; set; }
	public double? OriginalSubTotalVat { get; set; }
	public double? OriginalShippingCostsInclVat { get; set; }
	public double? OriginalShippingCostsVat { get; set; }
	public double? OriginalTotalInclVat { get; set; }
	public double? OriginalTotalVat { get; set; }
	public double? SubTotalExclVat { get; set; }
	public double? TotalExclVat { get; set; }
	public double? ShippingCostsExclVat { get; set; }
	public double? OriginalSubTotalExclVat { get; set; }
	public double? OriginalShippingCostsExclVat { get; set; }
	public double? OriginalTotalExclVat { get; set; }
	public required double OriginalSubTotalFee { get; set; }
	public required double SubTotalFee { get; set; }
	public required double OriginalOrderFee { get; set; }
	public required double OrderFee { get; set; }
	public required double OriginalTotalFee { get; set; }
	public required double TotalFee { get; set; }
	public System.Collections.Generic.List<MerchantOrderLineResponse>? Lines { get; set; }
	public string? Phone { get; set; }
	public required string Email { get; set; }
	public string? LanguageCode { get; set; }
	public string? CompanyRegistrationNo { get; set; }
	public string? VatNo { get; set; }
	public string? PaymentMethod { get; set; }
	public string? PaymentReferenceNo { get; set; }
	public required string CurrencyCode { get; set; }
	public required System.DateTime OrderDate { get; set; }
	public string? ChannelCustomerNo { get; set; }
	public System.Collections.Generic.Dictionary<string, string>? ExtraData { get; set; }

	System.Collections.Generic.IEnumerable<(string name, object? value)> __ICanIterate.IterateProperties()
	{
		yield return ("Id", Id);
		yield return ("ChannelName", ChannelName);
		yield return ("ChannelId", ChannelId);
		yield return ("GlobalChannelName", GlobalChannelName);
		yield return ("GlobalChannelId", GlobalChannelId);
		yield return ("ChannelOrderSupport", ChannelOrderSupport switch
		{
			OrderSupport.NONE => "NONE",
			OrderSupport.ORDERS => "ORDERS",
			OrderSupport.SPLIT_ORDERS => "SPLIT_ORDERS",
			OrderSupport.SPLIT_ORDER_LINES => "SPLIT_ORDER_LINES",
			_ => null
		});
		yield return ("ChannelOrderNo", ChannelOrderNo);
		yield return ("CommercialOrderNo", CommercialOrderNo);
		yield return ("MerchantOrderNo", MerchantOrderNo);
		yield return ("Status", Status switch
		{
			OrderStatusView.IN_PROGRESS => "IN_PROGRESS",
			OrderStatusView.SHIPPED => "SHIPPED",
			OrderStatusView.IN_BACKORDER => "IN_BACKORDER",
			OrderStatusView.MANCO => "MANCO",
			OrderStatusView.CANCELED => "CANCELED",
			OrderStatusView.IN_COMBI => "IN_COMBI",
			OrderStatusView.CLOSED => "CLOSED",
			OrderStatusView.@NEW => "NEW",
			OrderStatusView.RETURNED => "RETURNED",
			OrderStatusView.REQUIRES_CORRECTION => "REQUIRES_CORRECTION",
			OrderStatusView.AWAITING_PAYMENT => "AWAITING_PAYMENT",
			_ => null
		});
		yield return ("IsBusinessOrder", IsBusinessOrder);
		yield return ("AcknowledgedDate", AcknowledgedDate);
		yield return ("CreatedAt", CreatedAt);
		yield return ("UpdatedAt", UpdatedAt);
		yield return ("ClosedAt", ClosedAt);
		yield return ("MerchantComment", MerchantComment);
		yield return ("BillingAddress", BillingAddress);
		yield return ("ShippingAddress", ShippingAddress);
		yield return ("SubTotalInclVat", SubTotalInclVat);
		yield return ("SubTotalVat", SubTotalVat);
		yield return ("ShippingCostsInclVat", ShippingCostsInclVat);
		yield return ("ShippingCostsVat", ShippingCostsVat);
		yield return ("TotalInclVat", TotalInclVat);
		yield return ("TotalVat", TotalVat);
		yield return ("OriginalSubTotalInclVat", OriginalSubTotalInclVat);
		yield return ("OriginalSubTotalVat", OriginalSubTotalVat);
		yield return ("OriginalShippingCostsInclVat", OriginalShippingCostsInclVat);
		yield return ("OriginalShippingCostsVat", OriginalShippingCostsVat);
		yield return ("OriginalTotalInclVat", OriginalTotalInclVat);
		yield return ("OriginalTotalVat", OriginalTotalVat);
		yield return ("SubTotalExclVat", SubTotalExclVat);
		yield return ("TotalExclVat", TotalExclVat);
		yield return ("ShippingCostsExclVat", ShippingCostsExclVat);
		yield return ("OriginalSubTotalExclVat", OriginalSubTotalExclVat);
		yield return ("OriginalShippingCostsExclVat", OriginalShippingCostsExclVat);
		yield return ("OriginalTotalExclVat", OriginalTotalExclVat);
		yield return ("OriginalSubTotalFee", OriginalSubTotalFee);
		yield return ("SubTotalFee", SubTotalFee);
		yield return ("OriginalOrderFee", OriginalOrderFee);
		yield return ("OrderFee", OrderFee);
		yield return ("OriginalTotalFee", OriginalTotalFee);
		yield return ("TotalFee", TotalFee);
		yield return ("Lines", Lines);
		yield return ("Phone", Phone);
		yield return ("Email", Email);
		yield return ("LanguageCode", LanguageCode);
		yield return ("CompanyRegistrationNo", CompanyRegistrationNo);
		yield return ("VatNo", VatNo);
		yield return ("PaymentMethod", PaymentMethod);
		yield return ("PaymentReferenceNo", PaymentReferenceNo);
		yield return ("CurrencyCode", CurrencyCode);
		yield return ("OrderDate", OrderDate);
		yield return ("ChannelCustomerNo", ChannelCustomerNo);
		yield return ("ExtraData", ExtraData);
	}
}
